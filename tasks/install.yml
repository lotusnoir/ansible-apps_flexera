---
- name: "Check for flexera binary"
  ansible.builtin.stat:
    path: '{{ flexera_install_dir }}/els'
  changed_when: false
  register: flexera_binary

- name: "Check if source_file exists"
  ansible.builtin.stat:
    path: "{{ flexera_source_file }}"
  delegate_to: localhost
  register: source_file

- name: "Source file doesnt exist, we stop playing"
  ansible.builtin.meta: end_host
  when: not source_file.stat.exists

- name: "Install tasks"
  when: not flexera_binary.stat.exists or flexera_force_install
  block:
    - name: Create flexera group
      ansible.builtin.group:
        name: "{{ flexera_group }}"
        system: true

    - name: "Create flexera user"
      ansible.builtin.user:
        name: "{{ flexera_user }}"
        group: "{{ flexera_group }}"
        create_home: true
        system: true

    - name: "Create a directory if it does not exist"
      ansible.builtin.file:
        path: "{{ flexera_install_dir }}"
        owner: "{{ flexera_user }}"
        group: "{{ flexera_group }}"
        state: directory
        mode: '0755'
      register: create_dir

    - name: "Unarchive package in folder"
      ansible.builtin.unarchive:
        src: "{{ flexera_source_file }}"
        dest: "{{ flexera_install_dir }}"
        owner: "{{ flexera_user }}"
        group: "{{ flexera_group }}"
        #when: create_dir.changed

    - name: "Install flexera"
      ansible.builtin.command: "{{ flexera_install_dir }}/els install"
      changed_when: create_dir.changed
      #when: create_dir.changed

    # - name: "execute command restorecon"
    #   shell: |
    #     /sbin/restorecon -v {{ flexera_install_dir }}/apache-tomcat/bin/startup.sh
    #     /sbin/restorecon -v {{ flexera_install_dir }}/jre/bin/java
    #
    # - name: "execute command ausearch"
    #   shell: |
    #     ausearch -c '(artup.sh)' --raw | audit2allow -M els-artupsh
    #     ausearch -c '(java)' --raw | audit2allow -M els-java
    #
    # - name: "execute command semodule"
    #   shell: |
    #     semodule -i els-artupsh.pp
    #     semodule -i els-java.pp

    - name: "Open firewall ports"
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
      notify: Reload firewalld
      with_items:
        - 8081/tcp
        - 7071/tcp
      when: flexera_config_firewalld

- name: "Enable flexnetls-advaoptc"
  ansible.builtin.service:
    name: flexnetls-advaoptc
    state: started
    enabled: true

- name: "Enable flexnetls-manager"
  ansible.builtin.service:
    name: flexnetls-manager
    state: started
    enabled: true
